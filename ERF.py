# Random Forest Classifier
import time
# Importing the libraries
start_time = time.time()
start_time1 = time.clock()
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the datasets

datasets = pd.read_csv('Full_Dataset.csv')
X = datasets.iloc[:, [3,4,5,6,7,8,9,10,11]].values
Y = datasets.iloc[:, 12].values

# Splitting the dataset into the Training set and Test set

from sklearn.model_selection import train_test_split
X_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.25, random_state = 0)

# print("X_Train-")
# print(X_Train)
# print("X_Test-")
# print(X_Test)
# print("Y_Train-")
# print(Y_Train)
# print("Y_Test-")
# print(Y_Test)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
# print("Standardised data-")
# print(sc_X)

X_Train = sc_X.fit_transform(X_Train)
# print("Transformed train data")
# print(X_Train)

X_Test = sc_X.transform(X_Test)
# print("Transformed test data")
# print(X_Test)


# Fitting the classifier into the Training set

from sklearn.ensemble import ExtraTreesClassifier
#classifier = RandomForestClassifier(n_estimators = 200, criterion = 'entropy', random_state = 0)
classifier = ExtraTreesClassifier(n_estimators=100,criterion = 'entropy', max_depth=None,min_samples_split=2, random_state=0)
classifier.fit(X_Train,Y_Train)
print("ERF classifier built ")


# Predicting the test set results for user input

# #1. left
#Y_Pr = classifier.predict([[1358552921,1358553020,0.027450982,0.027450982,317,1313,-0.494209,5.007181,8.417499]])
# #2. right
#Y_Pr = classifier.predict([[134087519,134087583,0.200000018,0.266666681,241,1009,0.6772051,7.5858974,6.177858]])
# #3. left
#Y_Pr = classifier.predict([[80428485,80428575,0.080078125,0.080078125,289.73172,1764.2262,1.0846461,3.6244066,9.04751]])
# #4. left
#Y_Pr = classifier.predict([[80429621,80429714,0.07421875,0.07421875,512.52545,1640.2806,1.3464938,4.077441,8.816565]])
# #5.right
#Y_Pr = classifier.predict([[80505084,80505174,0.078125,0.078125,728.3256,1929.1539,-0.24048555,3.6129177,9.113692]])
# #6. right
#Y_Pr = classifier.predict([[80505504,80505583,0.09375,0.09375,562.4792,1769.224,-0.56075025,3.8393779,9.006393]])
# #7. left
#Y_Pr = classifier.predict([[135285765,135285964,0.04296875,0.04296875,534.50507,1934.1517,4.202221, 4.772546,7.4655566]])
# #8. left
#Y_Pr = classifier.predict([[135286553,135286742,0.060546875,0.060546875,753.3025,1615.2915,5.1250362,4.9221406,6.758471]])
# #9.right
#Y_Pr = classifier.predict([[135348403,135348556,0.04296875,0.04296875,736.31824,1931.1531,1.9641609,4.043805,8.715509]])
# #10. right
#Y_Pr = classifier.predict([[135349215,135349359,0.05078125,0.05078125,179.8335,1769.224,1.7784592,4.1834326,8.689441]])


#This is typed using left hand.
#Y_Pr = classifier.predict([[80418623, 80418727,  0.08984375,    0.08984375 ,635.4117, 1952.1438  ,1.1425358 ,3.3270779 ,9.153992]])
#Y_Pr = classifier.predict([[80419106, 80419187,  0.103515625,   0.103515625,   819.24146, 1623.2881  ,1.8688926 ,3.8251395,    8.834361]])
#Y_Pr = classifier.predict([[80419966, 80420056,  0.072265625    ,0.072265625,  428.60315, 1612.2928  ,1.2720109 ,3.735497, 8.977663]])
#Y_Pr = classifier.predict([[80420333, 80420443,  0.052734375    ,0.052734375,  309.71323, 1632.284   ,1.0806004 ,3.658272, 9.034365]])
#Y_Pr = classifier.predict([[80420632, 80420736,  0.07421875 ,0.07421875    ,352.67346,    1760.228,  1.0319422  ,3.6449015,    9.045451]])
#Y_Pr = classifier.predict([[80421374, 80421435,  0.06640625 ,0.06640625,   488.54764, 2083.0864, 1.0367804, 3.6707609, 9.034434]])

#Y_Pr = classifier.predict([[52465454,52465544,0.290196091,0.290196091,347,1349,3.9272828,8.004594,4.0832973]])
#Y_Pr = classifier.predict([[80422087,80422178,0.09765625,0.09765625,629.41724,1944.1473,1.2086265,3.7594984,8.976401]])
#9. Y_Pr = classifier.predict([[80423080,80423170,0.07421875, 0.07421875,    316.70676, 1623.2881, 0.936078,  3.5945187, 9.07599]])
#Y_Pr = classifier.predict([[80423571, 80423683,  0.0859375, 0.0859375, 467.56708, 1938.1499, 0.9961408, 3.688171,  9.031915]])
#Y_Pr = classifier.predict(sc_X.transform([[80424043,  80424143,  0.0546875, 0.0546875, 207.80759, 1776.221,  0.95992374,    3.5839024  ,9.077697]]))
#Y_Pr = classifier.predict([[80424785, 80424885,  0.109375,  0.109375   ,643.40424 ,1636.2823,    1.5073066  ,3.8941743 ,8.873208]])

#This is typed using right hand.
#Y_Pr = classifier.predict([[80502043, 80502123,  0.078125,  0.078125,  792.2664,  1921.1575, -0.29717508,   3.474394,  9.165733]])
#Y_Pr = classifier.predict([[80502534, 80502614,  0.1171875, 0.1171875, 192.82146, 1747.2336, -1.1080424 ,4.0830197 ,8.847123]])
#Y_Pr = classifier.predict([[80503140, 80503231,  0.076171875,   0.076171875,   731.3229   ,1927.1548,    -0.16741763,   3.608401,  9.117116]])
#Y_Pr = classifier.predict([[80503462, 80503534,  0.08203125,    0.08203125,    604.4403,  1620.2893, -0.5665772 ,4.0440984 ,8.915977]])
#Y_Pr = classifier.predict([[80503713, 80503775,  0.08203125,    0.08203125,    638.4089,  2061.096,  -0.25427368    ,3.7006688 ,9.078039]])

#Y_Pr = classifier.predict(sc_X.transform([[80498407,  80498463,  0.08984375,    0.08984375,    473.56152  ,1611.2933,    -0.7980578,    3.7585957, 9.022552]]))
#Y_Pr = classifier.predict([[80498706, 80498778,  0.083984375    ,0.083984375,  224.79185, 1729.2416, -1.1773121,    4.069536,  8.844388]])
#Y_Pr = classifier.predict([[80499473, 80499530   ,0.08203125    ,0.08203125    ,674.3756, 1610.2937  ,-0.57157516   ,3.816407, 9.015471]])
#Y_Pr = classifier.predict([[80499856  ,80499948  ,0.080078125,  0.080078125,   541.4986,  1765.2258, -0.6534053,    3.7643676, 9.031775]])
#10.Y_Pr = classifier.predict([[80500002  ,80500095  ,0.078125  ,0.078125, 617.4283,  1766.2253  ,-0.6534053    ,3.7643676 ,9.031775]])


#drishya's CSV

#left
#111    MMB29P    0   h 65407689   65407812   0.380392194    0.193548381    422.41333  1007.21313 -0.425719  5.9003606  7.8212585  1  0  0
#Y_Pr = classifier.predict([[65407689  ,65407812, 0.380392194,0.193548381    ,422.41333 ,1007.21313,-0.425719, 5.9003606, 7.8212585]])
#111    MMB29P    0   e 65413176   65413263   0.262745112    0.161290318    200.72122  903.2943   0.3752911  6.015282   7.7358155  1  0  0
#Y_Pr = classifier.predict([[65413176  ,65413263  ,0.262745112   ,0.161290318   ,200.72122 ,903.2943  ,0.3752911,    6.015282   ,7.7358155]])
#111    MMB29P    0   f 65413764   65413836   0.498039246    0.193548381    309.57004  1005.21466 0.4245219  5.9926867  7.750779   1  0  0
#Y_Pr = classifier.predict([[65413764,65413836 ,0.498039246   ,0.193548381   ,309.57004 ,1005.21466    ,0.4245219 ,5.9926867 ,7.750779]])
#111    MMB29P    0   t 65414182   65414209   0.419607878    0.193548381    349.51456  912.2873   0.56996965 5.9099374  7.804948   1  0  0
#Y_Pr = classifier.predict([[65414182,65414209,0.419607878 ,0.193548381   ,349.51456 ,912.2873  ,0.56996965    ,5.9099374 ,7.804948]])
#111    MMB29P    0   Space 65414665   65414755   0.498039246    0.193548381    256.64355  1266.011   0.49200845 5.9867015  7.7515273  1  0  0
#Y_Pr = classifier.predict([[65414665,65414755 ,0.498039246   ,0.193548381   ,256.64355 ,1266.011  ,0.49200845    ,5.9867015 ,7.7515273]])

#111    MMB29P    0   Del   65417933   65418005   0.368627459    0.161290318    686.0472   1124.1218  0.9784803  6.1258645  7.5950065  1  0  0
#Y_Pr = classifier.predict([[65417933,65418005 ,0.368627459   ,0.161290318   ,686.0472  ,1124.1218 ,0.9784803 ,6.1258645 ,7.5950065]])
#111    MMB29P    0   d 65418672   65418751   0.274509817    0.129032254    239.66713  1024.1998  0.5645827  5.6341553  8.0066595  1  0  0
#Y_Pr = classifier.predict([[65418672,65418751,0.274509817 ,0.129032254   ,239.66713 ,1024.1998 ,0.5645827 ,5.6341553 ,8.0066595]])

#1118    MMB29P    0   123?  65419552   65419661   0.498039246    0.290322572    88.876564  1240.0313  0.4487632  5.551705   8.071302   1  0  0
#Y_Pr = classifier.predict([[65419552, 65419661,  0.498039246,   0.290322572,88.876564  ,1240.0313 ,0.4487632 ,5.551705  ,8.071302]])
#111    MMB29P    0  1  65420244   65420334   0.274509817    0.129032254    73.89737   896.29974  0.3760393  5.658247   8.000674   1  0  0
#Y_Pr = classifier.predict([[65420244, 65420334,  0.274509817,0.129032254    ,73.89737  ,896.29974 ,0.3760393 ,5.658247  ,8.000674]])
#111    MMB29P    0   Space 65420835   65420917   0.498039246    0.290322572    304.577    1248.025   0.3669114  5.6901197  7.9785275  1  0  0
#Y_Pr = classifier.predict([[65420835, 65420917   ,0.498039246   ,0.290322572   ,304.577   ,1248.025  ,0.3669114,    5.6901197  ,7.9785275]])
#111    MMB29P    0  2  65421873   65421927   0.388235331    0.193548381    159.77809  913.2865   0.4364929  5.638046   8.011897   1  0  0
#Y_Pr = classifier.predict([[65421873,65421927 ,0.388235331   ,0.193548381   ,159.77809,    913.2865   ,0.4364929 ,5.638046  ,8.011897]])
#111    MMB29P    0   Space 65422364   65422473   0.498039246    0.193548381    309.57004  1258.0172  0.4890157  5.7644897  7.918373   1  0  0
#Y_Pr = classifier.predict([[65422364, 65422473   ,0.498039246   ,0.193548381   ,309.57004 ,1258.0172,    0.4890157  ,5.7644897 ,7.918373]])
#111    MMB29P    0  8  65423921   65424020   0.321568638    0.193548381    518.28015  916.2842   1.5417162  6.2943563  7.3602247  1  0  0
#Y_Pr = classifier.predict([[65423921  ,65424020  ,0.321568638   ,0.193548381   ,518.28015 ,916.2842  ,1.5417162 ,6.2943563 ,7.3602247]])


#right
#112, MMB29P, 0, h, 65472653, 65472729, 0.49803924560546875, 0.22580644488334656, 428.405, 1015.20685, 0.45893854, 4.8567877, 8.507048, 1, 0, 0
#Y_Pr = classifier.predict([[65472653, 65472729, 0.49803924560546875, 0.22580644488334656, 428.405, 1015.20685, 0.45893854, 4.8567877, 8.507048]])
#112, MMB29P, 0, i, 65472866, 65472957, 0.4901961088180542, 0.19354838132858276, 518.28015, 905.2927, 0.4269161, 4.931457, 8.465598, 1, 0, 0
#Y_Pr = classifier.predict([[65472866, 65472957, 0.4901961088180542, 0.19354838132858276, 518.28015, 905.2927, 0.4269161, 4.931457, 8.465598,]])
#112, MMB29P, 0, Space, 65473330, 65473421, 0.49803924560546875, 0.19354838132858276, 403.43967, 1245.0273, 0.45070848, 4.9465704, 8.455572, 1, 0, 0
#Y_Pr = classifier.predict([[65473330, 65473421, 0.49803924560546875, 0.19354838132858276, 403.43967, 1245.0273, 0.45070848, 4.9465704, 8.455572]])
#112, MMB29P, 0, s, 65473876, 65473949, 0.49803924560546875, 0.22580644488334656, 173.75867, 1014.20764, -0.25573066, 5.5898623, 8.053347, 1, 0, 0
#Y_Pr = classifier.predict([[65473876, 65473949, 0.49803924560546875, 0.22580644488334656, 173.75867, 1014.20764, -0.25573066, 5.5898623, 8.053347]])
#112, MMB29P, 0, o, 65474468, 65474540, 0.250980406999588, 0.16129031777381897, 561.2205, 909.2896, 0.32396543, 5.1393037, 8.345738, 1, 0, 0
#Y_Pr = classifier.predict([[65474468, 65474540, 0.250980406999588, 0.16129031777381897, 561.2205, 909.2896, 0.32396543, 5.1393037, 8.345738]])
#1126, MMB29P, 0, u, 65474896, 65474977, 0.49803924560546875, 0.19354838132858276, 450.37448, 917.2834, 0.33728316, 5.258565, 8.270471, 1, 0, 0
#Y_Pr = classifier.predict([[65474896, 65474977, 0.49803924560546875, 0.19354838132858276, 450.37448, 917.2834, 0.33728316, 5.258565, 8.270471]])
#11#2, MMB29P, 0, m, 65475260, 65475359, 0.250980406999588, 0.16129031777381897, 552.23303, 1146.1046, 0.2599205, 5.1506763, 8.34095, 1, 0, 0
#Y_Pr = classifier.predict([[65475260, 65475359, 0.250980406999588, 0.16129031777381897, 552.23303, 1146.1046, 0.2599205, 5.1506763, 8.34095]])
#11#2, MMB29P, 0, y, 65475879, 65475987, 0.49803924560546875, 0.22580644488334656, 383.4674, 924.2779, 0.0664391, 5.207688, 8.309227, 1, 0, 0
#Y_Pr = classifier.predict([[65475879, 65475987, 0.49803924560546875, 0.22580644488334656, 383.4674, 924.2779, 0.0664391, 5.207688, 8.309227]])
#112, MMB29P, 0, a, 65476934, 65477007, 0.49803924560546875, 0.3870967626571655, 90.87379, 1003.21625, -0.05431845, 5.2139726, 8.305486, 1, 0, 0
#Y_Pr = classifier.predict([[65476934, 65477007, 0.49803924560546875, 0.3870967626571655, 90.87379, 1003.21625, -0.05431845, 5.2139726, 8.305486]])



#verfiying user who was not present in datacollection
#left
#133    PKQ1.180917.001   0   v 135285765  135285964, 0.04296875,    0.04296875 534.50507  1934.1517  4.202221   4.772546   ,7.4655566 1  0  0
#Y_Pr = classifier.predict([[135285765,    135285964, 0.04296875,    0.04296875 ,534.50507,    1934.1517  ,4.202221, 4.772546   ,7.4655566]])
#133    PKQ1.180917.001   0   i 135286553  135286742, 0.060546875,   0.060546875    753.3025   1615.2915  5.1250362  4.9221406  6.758471   1  0  0
#Y_Pr = classifier.predict([[135286553,    135286742, 0.060546875,   0.060546875,   753.3025   ,1615.2915 ,5.1250362 ,4.9221406,    6.758471]])
#133    PKQ1.180917.001   0   m 135287349  135287563, 0.044921875    0.044921875    792.2664   1944.1473  4.4021487  4.5524273  7.4877825  1  0  0
#Y_Pr = classifier.predict([[135287349,    135287563, 0.044921875    ,0.044921875,  792.2664,  1944.1473, 4.4021487  ,4.5524273,    7.4877825]])
#133    PKQ1.180917.001   0   a 135288069  135288289, 0.041015625    0.041015625    186.82701  1757.2292  3.3179362  4.295818   8.167475   1  0  0
#Y_Pr = classifier.predict([[135288069,    135288289, 0.041015625    ,0.041015625,  186.82701, 1757.2292, 3.3179362, 4.295818,  8.167475]])
#133    PKQ1.180917.001   0   l 135288815  135289006  0.044921875    0.044921875    896.1702   1770.2236  4.979661   4.658514   7.047808   1  0  0
#Y_Pr = classifier.predict([[135288815 ,135289006 ,0.044921875   ,0.044921875,  896.1702   ,1770.2236 ,4.979661, 4.658514   ,7.047808]])

#right
#134    PKQ1.180917.001   0   n 135348403  135348556  0.04296875 0.04296875 736.31824  1931.1531  1.9641609  4.043805   8.715509   2  0  0
#Y_Pr = classifier.predict([[135348403,    135348556, 0.04296875,    0.04296875,    736.31824, 1931.1531, 1.9641609, 4.043805,  8.715509]])
#134    PKQ1.180917.001   0   a 135349215  135349359  0.05078125 0.05078125 179.8335   1769.224   1.7784592  4.1834326  8.689441   2  0  0
#Y_Pr = classifier.predict([[135349215,    135349359, 0.05078125 ,0.05078125    ,179.8335, 1769.224   ,1.7784592,    4.1834326  ,8.689441]])
#134    PKQ1.180917.001   0   m 135350018  135350111  0.064453125    0.064453125    820.24054  1912.1614  2.0424128  4.0735016  8.683636   2  0  0
#Y_Pr = classifier.predict([[135350018,    135350111  ,0.064453125,  0.064453125,   820.24054  ,1912.1614 ,2.0424128 ,4.0735016 ,8.683636]])
#134    PKQ1.180917.001   0   e 135350761  135350841  0.056640625    0.056640625    338.6864   1616.2911  1.7840629  4.2594547  8.651274   2  0  0
Y_Pr = classifier.predict([[135350761  ,135350841 ,0.056640625   ,0.056640625   ,338.6864  ,1616.2911 ,1.7840629,    4.2594547  ,8.651274]])



print("Predicted test results for specific user input-")
print("class :", Y_Pr)
if(Y_Pr==[0]):
    print("Typed character in left hand.")
else:
    print("Typed character in right hand.")

# Predicting the test set results
Y_Pred = classifier.predict(X_Test)
# print("Predicted test results of X_test-")
# # print(Y_Pred)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_Test, Y_Pred)
print("Confusion matrix is")
print(cm)
#
# #Accuracy
from sklearn import metrics
print("Accuracy-" + str(metrics.accuracy_score(Y_Test,Y_Pred)))
print("--- %s seconds ---" %(time.time() - start_time))

print (time.clock() - start_time1, "seconds")


